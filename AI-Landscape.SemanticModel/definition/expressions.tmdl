expression 010_tblOrg-Formatting =
		let
		    Source = #"000_tblOrg",
		    #"URL replaced (https:// with (" = Table.ReplaceValue(Source,"(https://","(",Replacer.ReplaceText,{"URL"}),
		    #"URL replaced ( with https://" = Table.ReplaceValue(#"URL replaced (https:// with (","(","https://",Replacer.ReplaceText,{"URL"}),
		    #"URL replaced ) with blank" = Table.ReplaceValue(#"URL replaced ( with https://",")","",Replacer.ReplaceText,{"URL"}),
		    #"Split URL by linefeed" = Table.SplitColumn(#"URL replaced ) with blank", "URL", Splitter.SplitTextByEachDelimiter({"#(lf)"}, QuoteStyle.Csv, false), {"URL-Main", "URL-Secondary"}),
		    #"Added ActiveOrNot" = Table.AddColumn(#"Split URL by linefeed", "ActiveOrNot", each if Text.StartsWith([Status], "Active") then "‚ö° active" else if Text.StartsWith([Status], "Inactive") then "üí§ inactive" else if Text.StartsWith([Status], "To Be Active") then "‚è≥ To Be Active" else "‚ùî unknown"),
		    #"Added OrgStructure" = Table.AddColumn(#"Added ActiveOrNot", "OrgStructure", each if Text.Contains([Activities AI], "Company private") then "Company private" else if Text.Contains([Activities AI], "Company public") then "Company public" else if Text.Contains([Activities AI], "Charity / nonprofit") then "Charity / nonprofit" else if Text.Contains([Activities AI], "Approved research institute") then "Approved research institute (ARI)" else if Text.Contains([Activities AI], "Government federal") then "Government federal" else if Text.Contains([Activities AI], "Government state") then "Government state" else "No structure selected"),
		    #"Added Conditional Column" = Table.AddColumn(#"Added OrgStructure", "Country", each if Text.Contains([Location], "Australia") then "Australia" else if Text.Contains([Location], " AU ") then "Australia" else "Not Australia")
		in
		    #"Added Conditional Column"
	lineageTag: b515d12b-1bca-4180-9b56-1111d984fc1b
	queryGroup: 2-Transform

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 000_tblOrg =
		let
		    Source = GoogleSheets.Contents("https://docs.google.com/spreadsheets/d/1zEiH7vRUdsV5oiYUqm0kHBdVJHJjveYz1IDTWHWsApI/"),
		    Organisations_Table = Source{[name="Organisation",ItemKind="Table"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Organisations_Table, [PromoteAllScalars=true]),
		    #"Promoted Headers1" = Table.PromoteHeaders(#"Promoted Headers", [PromoteAllScalars=true]),
		    #"Removed blank column" = Table.RemoveColumns(#"Promoted Headers1",{""}),
		    #"Removed bottom row" = Table.RemoveLastN(#"Removed blank column",1),
		    #"Duplicated Organisation" = Table.DuplicateColumn(#"Removed bottom row", "Organisation", "Organisation-Shortened"),
		    #"Split Organisation by (" = Table.SplitColumn(#"Duplicated Organisation", "Organisation-Shortened", Splitter.SplitTextByEachDelimiter({"("}, QuoteStyle.Csv, true), {"Organisation-Shortened.1", "Organisation-Shortened.2"}),
		    #"Replaced ) in Organisation-Shortened.2" = Table.ReplaceValue(#"Split Organisation by (",")","",Replacer.ReplaceText,{"Organisation-Shortened.2"}),
		    #"Added Organisation-Shortened" = Table.AddColumn(#"Replaced ) in Organisation-Shortened.2", "Organisation-Shortened", each if [#"Organisation-Shortened.2"] = null then [#"Organisation-Shortened.1"] else [#"Organisation-Shortened.2"]),
		    #"Replaced Value" = Table.ReplaceValue(#"Added Organisation-Shortened","University","Uni",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value10" = Table.ReplaceValue(#"Replaced Value","Australian Capital Territory","ACT",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value14" = Table.ReplaceValue(#"Replaced Value10","Western Australia","WA",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value15" = Table.ReplaceValue(#"Replaced Value14","Queensland","QLD",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value15","New South Wales","NSW",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value12" = Table.ReplaceValue(#"Replaced Value11","Victoria","VIC",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value13" = Table.ReplaceValue(#"Replaced Value12","South Australia","SA",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value13","Australians","Aussies",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value6","Effective Altruism","EA",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value8" = Table.ReplaceValue(#"Replaced Value7","Artificial Intelligence","AI",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value9" = Table.ReplaceValue(#"Replaced Value8","Technology","Tech",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value9","Governance","Gov",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","Government","Govt",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value2","Australian","Aus",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","Federal","Fed",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","Australia","Aus",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value16" = Table.ReplaceValue(#"Replaced Value5","Mathematic","Math",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value17" = Table.ReplaceValue(#"Replaced Value16","Group","Grp",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value18" = Table.ReplaceValue(#"Replaced Value17","International","Intl",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value19" = Table.ReplaceValue(#"Replaced Value18","Development","Dev",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value20" = Table.ReplaceValue(#"Replaced Value19"," and"," &",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value21" = Table.ReplaceValue(#"Replaced Value20","Intelligence","Intell.",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value22" = Table.ReplaceValue(#"Replaced Value21","Commonwealth Scientific & Industrial Research Organisation (CSIRO)","CSIRO",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value24" = Table.ReplaceValue(#"Replaced Value22","Institute","Institute",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value25" = Table.ReplaceValue(#"Replaced Value24","Conference","Conf",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value26" = Table.ReplaceValue(#"Replaced Value25","Fundamentals","Fundies",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value27" = Table.ReplaceValue(#"Replaced Value26","Institute","Inst.",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value28" = Table.ReplaceValue(#"Replaced Value27","Automated","Auto.",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value29" = Table.ReplaceValue(#"Replaced Value28","Existential","Exist.",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value30" = Table.ReplaceValue(#"Replaced Value29","Canada","CA",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value31" = Table.ReplaceValue(#"Replaced Value30","Singapore","SG",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value32" = Table.ReplaceValue(#"Replaced Value31","Korea","KR",Replacer.ReplaceText,{"Organisation-Shortened"}),
		    #"Replaced Value23" = Table.ReplaceValue(#"Replaced Value32","Japan","JP",Replacer.ReplaceText,{"Organisation-Shortened"})
		in
		    #"Replaced Value23"
	lineageTag: f75e56a8-1f8d-4d04-97bb-202cb6253d92
	queryGroup: 1-Extract

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 000_tblLocationsAcronyms =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i45WCnZU0lEKzi8tyVBwLC0uKUrMyUzUQTCVYnWilcJBasJTi0tSi/Jwq/ILDgcq80stV4AYF56Yk1qMrijM0xmoKCwzuSS/CM2IWAA=", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Acronym = _t, #"Full-Location" = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Acronym", type text}, {"Full-Location", type text}})
		in
		    #"Changed Type"
	lineageTag: e2409cdb-990b-4321-aafb-4c4c3e94c4db
	queryGroup: 1-Extract

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 005_tblOrg-events-count =
		let
		    Source = #"000_tblOrg",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "Organisation-Shortened", "Status"}),
		    #"Split Column by Delimiter" = Table.ExpandListColumn(Table.TransformColumns(#"Removed Other Columns", {{"Status", Splitter.SplitTextByDelimiter("#(lf)", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "Status"),
		    #"Filtered Rows" = Table.SelectRows(#"Split Column by Delimiter", each ([Status] <> "" and [Status] <> "Active!" and [Status] <> "Formerly in CSIRO" and [Status] <> "Inactive" and [Status] <> "Not Yet Active")),
		    #"Split Column by Delimiter1" = Table.SplitColumn(#"Filtered Rows", "Status", Splitter.SplitTextByEachDelimiter({" "}, QuoteStyle.Csv, false), {"Date", "Event"}),
		    #"Replaced Value" = Table.ReplaceValue(#"Split Column by Delimiter1",":","",Replacer.ReplaceText,{"Date"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Replaced Value",{{"Date", type date}}),
		    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Changed Type"),
		    #"Sorted Rows" = Table.Sort(#"Removed Errors",{{"Date", Order.Descending}}),
		    #"Added Index" = Table.AddIndexColumn(#"Sorted Rows", "Index", 1, 1, Int64.Type),
		    #"Sorted Rows1" = Table.Sort(#"Added Index",{{"Date", Order.Ascending}, {"Organisation", Order.Ascending}}),
		    #"Added Index1" = Table.AddIndexColumn(#"Sorted Rows1", "Index-Asc-ByOrgDate", 1, 1, Int64.Type),
		    #"Sorted Rows2" = Table.Sort(#"Added Index1",{{"Date", Order.Ascending}}),
		    #"Added Index2" = Table.AddIndexColumn(#"Sorted Rows2", "Index-Asc-ByDate", 1, 1, Int64.Type),
		    #"Added Index3" = Table.AddIndexColumn(#"Added Index2", "Index-Asc-ByDate-ForMerge", 0, 1, Int64.Type),
		    #"Counted Rows" = Table.RowCount(#"Added Index3")
		in
		    #"Counted Rows"
	lineageTag: 30045c78-3f0a-426d-b3c8-43f53a7342b6
	queryGroup: 2-Transform\Events

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Number

expression 005_tblOrg-events-ForMerge =
		let
		    Source = #"000_tblOrg",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "Organisation-Shortened", "Status"}),
		    #"Split Column by Delimiter" = Table.ExpandListColumn(Table.TransformColumns(#"Removed Other Columns", {{"Status", Splitter.SplitTextByDelimiter("#(lf)", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "Status"),
		    #"Filtered Rows" = Table.SelectRows(#"Split Column by Delimiter", each ([Status] <> "" and [Status] <> "Active!" and [Status] <> "Formerly in CSIRO" and [Status] <> "Inactive" and [Status] <> "Not Yet Active")),
		    #"Split Column by Delimiter1" = Table.SplitColumn(#"Filtered Rows", "Status", Splitter.SplitTextByEachDelimiter({" "}, QuoteStyle.Csv, false), {"Date", "Event"}),
		    #"Replaced Value" = Table.ReplaceValue(#"Split Column by Delimiter1",":","",Replacer.ReplaceText,{"Date"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Replaced Value",{{"Date", type date}}),
		    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Changed Type"),
		    #"Sorted Rows" = Table.Sort(#"Removed Errors",{{"Date", Order.Descending}}),
		    #"Added Index" = Table.AddIndexColumn(#"Sorted Rows", "Index", 1, 1, Int64.Type),
		    #"Sorted Rows1" = Table.Sort(#"Added Index",{{"Date", Order.Ascending}, {"Organisation", Order.Ascending}}),
		    #"Added Index1" = Table.AddIndexColumn(#"Sorted Rows1", "Index-Asc-ByOrgDate", 1, 1, Int64.Type),
		    #"Sorted Rows2" = Table.Sort(#"Added Index1",{{"Date", Order.Ascending}}),
		    #"Added Index2" = Table.AddIndexColumn(#"Sorted Rows2", "Index-Asc-ByDate", 1, 1, Int64.Type),
		    #"Added Index3" = Table.AddIndexColumn(#"Added Index2", "Index-Asc-ByDate-ForMerge", 0, 1, Int64.Type)
		in
		    #"Added Index3"
	lineageTag: f65ee772-89bb-483a-b5c9-ffe30f87eb83
	queryGroup: 2-Transform\Events

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 005_tblOrg-SplitContacts =
		let
		    Source = #"000_tblOrg",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "Key Contacts"}),
		    #"Filtered Rows1" = Table.SelectRows(#"Removed Other Columns", each ([Key Contacts] <> "")),
		    #"Added Custom" = Table.AddColumn(#"Filtered Rows1", "KeyContactsWithMarker", each "(main)" & [Key Contacts]),
		    #"Split Column by Delimiter" = Table.ExpandListColumn(Table.TransformColumns(#"Added Custom", {{"KeyContactsWithMarker", Splitter.SplitTextByDelimiter("#(lf)", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "KeyContactsWithMarker"),
		    #"Split Column by Delimiter1" = Table.SplitColumn(#"Split Column by Delimiter", "KeyContactsWithMarker", Splitter.SplitTextByEachDelimiter({","}, QuoteStyle.Csv, false), {"Name", "TitleAndLink"}),
		    #"Replaced Value" = Table.ReplaceValue(#"Split Column by Delimiter1","(","(https://",Replacer.ReplaceText,{"TitleAndLink"}),
		    #"Split Column by Delimiter2" = Table.SplitColumn(#"Replaced Value", "TitleAndLink", Splitter.SplitTextByEachDelimiter({"("}, QuoteStyle.Csv, false), {"Title", "Link"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Split Column by Delimiter2",")","",Replacer.ReplaceText,{"Link"}),
		    #"Added Conditional Column" = Table.AddColumn(#"Replaced Value1", "IsMain", each if Text.StartsWith([Name], "(main)") then "Main" else "Secondary"),
		    #"Replaced Value2" = Table.ReplaceValue(#"Added Conditional Column","(main)","",Replacer.ReplaceText,{"Name"}),
		    #"Removed Columns" = Table.RemoveColumns(#"Replaced Value2",{"Key Contacts"})
		in
		    #"Removed Columns"
	lineageTag: c43c1bb0-3fe9-444a-955f-d7ce389a18e0
	queryGroup: 2-Transform

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 005_tblOrg-SplitURLs =
		let
		    Source = #"000_tblOrg",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "URL"}),
		    #"URL replaced (https:// with (" = Table.ReplaceValue(#"Removed Other Columns","(https://","(",Replacer.ReplaceText,{"URL"}),
		    #"URL replaced ( with https://" = Table.ReplaceValue(#"URL replaced (https:// with (","(","https://",Replacer.ReplaceText,{"URL"}),
		    #"URL replaced ) with blank" = Table.ReplaceValue(#"URL replaced ( with https://",")","",Replacer.ReplaceText,{"URL"}),
		    #"Filtered Rows" = Table.SelectRows(#"URL replaced ) with blank", each ([URL] <> "")),
		    #"Added Custom" = Table.AddColumn(#"Filtered Rows", "URLWithMain", each "(main)"&[URL]),
		    #"Split URL by linefeed" = Table.ExpandListColumn(Table.TransformColumns(#"Added Custom", {{"URLWithMain", Splitter.SplitTextByDelimiter("#(lf)", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "URLWithMain"),
		    #"Added IsMain" = Table.AddColumn(#"Split URL by linefeed", "IsMain", each if Text.StartsWith([URLWithMain], "(main)") then "Main" else "Secondary"),
		    #"Replaced Value" = Table.ReplaceValue(#"Added IsMain","(main)","",Replacer.ReplaceText,{"URLWithMain"}),
		    #"Removed Columns" = Table.RemoveColumns(#"Replaced Value",{"URL"})
		in
		    #"Removed Columns"
	lineageTag: ae69c755-2b13-4306-8f9f-f1b43023c04f
	queryGroup: 2-Transform

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 015_tblOrg-BaseNameForMerge =
		let
		    Source = #"010_tblOrg-Formatting",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "Organisation-Shortened.1"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Removed Other Columns",{{"Organisation-Shortened.1", "OrganisationForWordcloud"}})
		in
		    #"Renamed Columns"
	lineageTag: e6b73457-b824-4220-ada8-ced939fb73af
	queryGroup: 2-Transform\Wordcloud

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 015_tblOrg-AcronymForMerge =
		let
		    Source = #"010_tblOrg-Formatting",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "Organisation-Shortened.2"}),
		    #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each ([#"Organisation-Shortened.2"] <> null)),
		    #"Renamed Columns" = Table.RenameColumns(#"Filtered Rows",{{"Organisation-Shortened.2", "OrganisationForWordcloud"}})
		in
		    #"Renamed Columns"
	lineageTag: 77669451-2630-49bf-bcb3-61a7af4b55ee
	queryGroup: 2-Transform\Wordcloud

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 005_ActivitiesSplit =
		let
		    Source = #"000_tblOrg",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "Activities AI"}),
		    #"Replaced Value15" = Table.ReplaceValue(#"Removed Other Columns","Charity / nonprofit","Charity/nonprofit",Replacer.ReplaceText,{"Activities AI"}),
		    #"Split Column by Delimiter" = Table.ExpandListColumn(Table.TransformColumns(#"Replaced Value15", {{"Activities AI", Splitter.SplitTextByDelimiter(", ", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "Activities AI"),
		    #"Changed Type" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"Activities AI", type text}}),
		    #"Duplicated Column" = Table.DuplicateColumn(#"Changed Type", "Activities AI", "Activities AI-shortened"),
		    #"Replaced Value" = Table.ReplaceValue(#"Duplicated Column","mid-career","mid",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value","No specific AI focus","None",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","government","govt",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value2","Coworking","Cowork",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","Advocacy","Advoc.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","Research","Rsrch",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value5","Advisory","Advis.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value6","capabilities","capab.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value8" = Table.ReplaceValue(#"Replaced Value7","Charity / nonprofit","Nonprofit",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value9" = Table.ReplaceValue(#"Replaced Value8","existential","exist.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value9","catastrophic","catast.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value10" = Table.ReplaceValue(#"Replaced Value11","mundane","mund.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value12" = Table.ReplaceValue(#"Replaced Value10","commercial","commrc.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value13" = Table.ReplaceValue(#"Replaced Value12","Company","Co.",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Replaced Value14" = Table.ReplaceValue(#"Replaced Value13","Nonprofit","NPO",Replacer.ReplaceText,{"Activities AI-shortened"}),
		    #"Added Activities-Explainer" = Table.AddColumn(#"Replaced Value14", "Activities-Explainer", each if [Activities AI] = "Talent early" then "Gets more people into the talent pipeline.#(#)(#)(#)(#)(cr)#(#)(#)(#)(#)(lf) Allows minimal or <3 years experience with no qualifications." else if [Activities AI] = "Talent mid-career" then "For moderately experienced peeps in AI safety, or experienced people in other fields transitioning over." else if [Activities AI] = "Research policy" then "Creates policy proposals and researches governance structures." else if [Activities AI] = "Research safety mundane" then "Looks at mundane harms that society already has coping mechanisms for. E.g. deepfakes, cheating on school exams." else if [Activities AI] = "Research safety existential" then "Explores AI ability to hurt thousands or cost billions" else if [Activities AI] = "Company private" then "Commercial incentives & no public oversight but also not suable for not maximising shareholder profits." else if [Activities AI] = "Company public" then "Commercial incentives & public oversight but suable for not maxxing profits." else if [Activities AI] = "Research capabilities" then "Improves AI capabilities, i.e. letting it do stuff whether safe or not." else if [Activities AI] = "Research safety catastrophic" then "Explores AI ability to hurt thousands or cost billions" else if [Activities AI] = "Advis. public" then "Informs public in neutral way" else if [Activities AI] = "Advoc. public" then "Advocates for particular actions" else null),
		    #"Duplicated Column1" = Table.DuplicateColumn(#"Added Activities-Explainer", "Activities AI-shortened", "Activities AI - Level"),
		    #"Split Column by Delimiter1" = Table.SplitColumn(#"Duplicated Column1", "Activities AI - Level", Splitter.SplitTextByDelimiter(" ", QuoteStyle.Csv), {"Activities AI - Level.1", "Activities AI - Level.2", "Activities AI - Level.3"}),
		    #"Replaced Value16" = Table.ReplaceValue(#"Split Column by Delimiter1","None","No specific AI focus",Replacer.ReplaceText,{"Activities AI-shortened", "Activities AI", "Activities AI - Level.1"})
		in
		    #"Replaced Value16"
	lineageTag: 7e5cc78f-95af-42ad-88c8-b737dfaef4fe
	queryGroup: 2-Transform

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 010_tblOrg-events =
		let
		    Source = #"000_tblOrg",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"Organisation", "Organisation-Shortened", "Status"}),
		    #"Split Column by Delimiter" = Table.ExpandListColumn(Table.TransformColumns(#"Removed Other Columns", {{"Status", Splitter.SplitTextByDelimiter("#(lf)", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "Status"),
		    #"Filtered Rows" = Table.SelectRows(#"Split Column by Delimiter", each ([Status] <> "" and [Status] <> "Active!" and [Status] <> "Formerly in CSIRO" and [Status] <> "Inactive" and [Status] <> "Not Yet Active")),
		    #"Split Column by Delimiter1" = Table.SplitColumn(#"Filtered Rows", "Status", Splitter.SplitTextByEachDelimiter({" "}, QuoteStyle.Csv, false), {"Date", "Event"}),
		    #"Replaced Value" = Table.ReplaceValue(#"Split Column by Delimiter1",":","",Replacer.ReplaceText,{"Date"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Replaced Value",{{"Date", type date}}),
		    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Changed Type"),
		    #"Sorted Rows" = Table.Sort(#"Removed Errors",{{"Date", Order.Descending}}),
		    #"Added Index" = Table.AddIndexColumn(#"Sorted Rows", "Index", 1, 1, Int64.Type),
		    #"Sorted Rows1" = Table.Sort(#"Added Index",{{"Date", Order.Ascending}, {"Organisation", Order.Ascending}}),
		    #"Added Index1" = Table.AddIndexColumn(#"Sorted Rows1", "Index-Asc-ByOrgDate", 1, 1, Int64.Type),
		    #"Sorted Rows2" = Table.Sort(#"Added Index1",{{"Date", Order.Ascending}}),
		    #"Added Index2" = Table.AddIndexColumn(#"Sorted Rows2", "Index-Asc-ByDate", 1, 1, Int64.Type),
		    #"Replaced Value13" = Table.ReplaceValue(#"Added Index2","Founded","founded",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value13","Active","‚ö° Active",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","launch","üöÄ launch",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","Merge","ü§ù Merge",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value5","inactive","üí§ inactive",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value18" = Table.ReplaceValue(#"Replaced Value6","Inactive","üí§ inactive",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value18","founded","üë∂ founded",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","ended","ü™¶ ended",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value2","created","üë∂ created",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value8" = Table.ReplaceValue(#"Replaced Value7","started","üë∂ started",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value9" = Table.ReplaceValue(#"Replaced Value8","moved","ü§ùmoved",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value10" = Table.ReplaceValue(#"Replaced Value9","application","üìã application",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value10","incorporated","üë∂ incorporated",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value12" = Table.ReplaceValue(#"Replaced Value11","announced","üì¢ announced",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value14" = Table.ReplaceValue(#"Replaced Value12","concept","üí° concept",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value15" = Table.ReplaceValue(#"Replaced Value14","milestone","üéØ milestone",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value16" = Table.ReplaceValue(#"Replaced Value15","active","‚ö° active",Replacer.ReplaceValue,{"Event"}),
		    #"Replaced Value17" = Table.ReplaceValue(#"Replaced Value16","published","üìÑ published",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value19" = Table.ReplaceValue(#"Replaced Value17","consultation","üë• consultation",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value20" = Table.ReplaceValue(#"Replaced Value19","start","‚ö° start",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value21" = Table.ReplaceValue(#"Replaced Value20","Start","‚ö° start",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value22" = Table.ReplaceValue(#"Replaced Value21","occurred","üìÖ occurred",Replacer.ReplaceText,{"Event"}),
		    #"Replaced Value23" = Table.ReplaceValue(#"Replaced Value22","event","üìÖ event",Replacer.ReplaceText,{"Event"}),
		    #"Added Event-Type" = Table.AddColumn(#"Replaced Value23", "Event-Type", each if Text.Contains([Event], "üë∂") then "- üë∂ founded" else if Text.Contains([Event], "ü™¶") then "-ü™¶ended" else if Text.Contains([Event], "ü§ù") then "- ü§ù merged" else if Text.Contains([Event], "üí§") then "- üí§ inactive" else if Text.Contains([Event], "üìã") then "- üìã application" else if Text.Contains([Event], "‚ö°") then "- ‚ö° active" else if Text.Contains([Event], "üì¢") then "- üì¢ announced" else if Text.Contains([Event], "üí°") then "-üí° concept" else if Text.Contains([Event], "üìÖ ") then "- üìÖ  event" else if Text.Contains([Event], "üöÄ") then "- üöÄ launch" else if Text.Contains([Event], "üë•") then "- üë• consultation" else if Text.Contains([Event], "üìÑ") then "- üìÑ published" else "- Misc"),
		    #"Merged Queries" = Table.NestedJoin(#"Added Event-Type", {"Index-Asc-ByDate"}, #"005_tblOrg-events-ForMerge", {"Index-Asc-ByDate-ForMerge"}, "005_tblOrg-events-ForMerge", JoinKind.LeftOuter),
		    #"Expanded 005_tblOrg-events-ForMerge" = Table.ExpandTableColumn(#"Merged Queries", "005_tblOrg-events-ForMerge", {"Date"}, {"Date-NextEntry"}),
		    #"Added Custom" = Table.AddColumn(#"Expanded 005_tblOrg-events-ForMerge", "DaysSincePreviousEntry", each [#"Date-NextEntry"]-[Date]),
		    #"Replaced Value24" = Table.ReplaceValue(#"Added Custom",null,#duration(0, 0, 0, 0),Replacer.ReplaceValue,{"DaysSincePreviousEntry"}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Replaced Value24",{{"DaysSincePreviousEntry", Int64.Type}}),
		    #"Added Conditional Column" = Table.AddColumn(#"Changed Type1", "Index-Asc-ByDate-WithJumps", each if [DaysSincePreviousEntry] > 61 then [#"Index-Asc-ByDate"] else (Number.RandomBetween(1,10)*[#"Index-Asc-ByDate"])),
		    #"Changed Type2" = Table.TransformColumnTypes(#"Added Conditional Column",{{"Index-Asc-ByDate-WithJumps", type number}}),
		    Custom1 = Table.AddColumn(#"Changed Type2", "Event-Icon", each if Text.Contains([Event], "üë∂") then "üë∂" else if Text.Contains([Event], "ü™¶") then "ü™¶" else if Text.Contains([Event], "ü§ù") then "ü§ù" else if Text.Contains([Event], "üí§") then "üí§" else if Text.Contains([Event], "üìã") then "üìã" else if Text.Contains([Event], "‚ö°") then "‚ö°" else if Text.Contains([Event], "üì¢") then "üì¢" else if Text.Contains([Event], "üí°") then "üí°" else if Text.Contains([Event], "üìÖ ") then "üìÖ " else if Text.Contains([Event], "üöÄ") then "üöÄ" else if Text.Contains([Event], "üë•") then "üë•" else if Text.Contains([Event], "üìÑ") then "üìÑ" else "‚ùî")
		in
		    Custom1
	lineageTag: 9f834d2d-90e0-4bb6-8894-9909d97afe40
	queryGroup: 2-Transform\Events

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

